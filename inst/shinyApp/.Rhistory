# Need to split the dataframe since Consultings needs to be dealt differently
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
View(ProjDF)
for(k in 1:dim(PkgProj)[1]){
Idx = which(ProjDF$UniqueCode==PkgProj$PackageLvl[k])
ProjDF[Idx,"TimeSpent"]=PkgProj$TimeSpent[k]
ProjDF[Idx,"Workers"]=PkgProj$Workers[k]
}
dim(PkgProj)
View(PkgProj)
View(PkgProj)
TEMP <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
str(ProjDF)
str(PkgProj)
PkgProj$PackageLvl = as.integer(PkgProj$PackageLvl)
TEMP <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
View(TEMP)
TEMP <- left_join(ProjDF, PkgProj, by = c("PackageLvl" = "UniqueCode"))
for(k in 1:dim(PkgProj)[1]){
Idx = which(ProjDF$UniqueCode==PkgProj$PackageLvl[k])
ProjDF[Idx,"TimeSpent"]=PkgProj$TimeSpent[k]
ProjDF[Idx,"Workers"]=PkgProj$Workers[k]
}
View(PkgProj)
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = Pkg %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
# Removing lines with values = 0
Pkg = Pkg[Pkg$TimeSpent!=0,-2]
# Renaming column
names(Proj)[1] = names(Pkg)[1]
# Grouping all together
PkgProj = rbind(Pkg,Proj)
View(PkgProj)
PkgProj$PackageLvl = as.integer(PkgProj$PackageLvl)
TEMP <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
View(TEMP)
k = 1
PkgProj$PackageLvl[k]
PkgProj$PackageLvl
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = Pkg %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
# Removing lines with values = 0
Pkg = Pkg[Pkg$TimeSpent!=0,-2]
# Renaming column
names(Proj)[1] = names(Pkg)[1]
# Grouping all together
PkgProj = rbind(Pkg,Proj)
# Changing data type
PkgProj$PackageLvl = as.integer(as.character(PkgProj$PackageLvl))
TEMP <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
View(TEMP)
ProjDF <- ProjDF %>% mutate(ProdDate = coalesce(TimeSpent,TimeSpent.y))
ProjDF <- ProjDF %>% mutate(ProdDate = coalesce(Workers,Workers.y))
ProjDF <- ProjDF[,-c(dim(ProjDF)[2]-1:dim(ProjDF)[2])]
ProjDF <- ProjDF %>% mutate(ProdDate = coalesce(TimeSpent,TimeSpent.y))
ProjDF <- ProjDF %>% mutate(ProdDate = coalesce(Workers,Workers.y))
ProjDF <- ProjDF[,-c(dim(ProjDF)[2]-1:dim(ProjDF)[2])]
# Joining the two dataframes
ProjDF <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
# Regrouping the columns
ProjDF <- ProjDF %>% mutate(ProdDate = coalesce(TimeSpent,TimeSpent.y))
function (cond)
View(ProjDF)
ProjDF <- ProjDF %>% mutate(TimeSpent = coalesce(TimeSpent.x,TimeSpent.y))
ProjDF <- ProjDF %>% mutate(Workers = coalesce(Workers.x,Workers.y))
ProjDF <- ProjDF[,-c(dim(ProjDF)[2]-1:dim(ProjDF)[2])]
ProjDF
str(ProjDF)
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = Pkg %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
# Removing lines with values = 0
Pkg = Pkg[Pkg$TimeSpent!=0,-2]
# Renaming column
names(Proj)[1] = names(Pkg)[1]
# Grouping all together
PkgProj = rbind(Pkg,Proj)
# Changing data type
PkgProj$PackageLvl = as.integer(as.character(PkgProj$PackageLvl))
# Joining the two dataframes
ProjDF <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
ProjDF %>% mutate(TimeSpent = coalesce(TimeSpent.x,TimeSpent.y))
# Regrouping the columns
ProjDF <- ProjDF %>% mutate(TimeSpent = coalesce(TimeSpent.x,TimeSpent.y))
ProjDF <- ProjDF %>% mutate(Workers = coalesce(Workers.x,Workers.y))
ProjDF <- ProjDF[,-c(dim(ProjDF)[2]-1:dim(ProjDF)[2])]
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = Pkg %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
# Removing lines with values = 0
Pkg = Pkg[Pkg$TimeSpent!=0,-2]
# Renaming column
names(Proj)[1] = names(Pkg)[1]
# Grouping all together
PkgProj = rbind(Pkg,Proj)
# Changing data type
PkgProj$PackageLvl = as.integer(as.character(PkgProj$PackageLvl))
# Joining the two dataframes
ProjDF <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl"))
# Regrouping the columns
ProjDF <- ProjDF %>% mutate(TimeSpent.x = coalesce(TimeSpent.x,TimeSpent.y))
ProjDF <- ProjDF %>% mutate(Workers.x = coalesce(Workers.x,Workers.y))
c(dim(ProjDF)[2]-1:dim(ProjDF)[2])
dim(ProjDF)[2]
seq(dim(ProjDF)[2]-1,dim(ProjDF)[2])
setnames(ProjDF, c("TimeSpent.x","Workers.x"), c("TimeSpent","Workers"))
ProjDF <- ProjDF[,-seq(dim(ProjDF)[2]-1,dim(ProjDF)[2])]
View(ProjDF)
View(Pkg)
View(ProjDF)
View(Proj)
View(Pkg)
# Focusing on project level
Proj = ProjDF %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
View(Proj)
TEMP <- ProjDF[ProjDF$ProjectLvl=="259165284",]
View(TEMP)
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = ProjDF %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
TEMP <- ProjDF[ProjDF$ProjectLvl=="259165284",]
View(TEMP)
paste(unique(TEMP$Workers[!is.na(TEMP$Workers)]),collapse=","))
paste(unique(TEMP$Workers[!is.na(TEMP$Workers)]),collapse=",")
View(Proj)
# Need to split the dataframe since Consultings needs to be dealt differently
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = Pkg %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
# Removing lines with values = 0
Pkg = Pkg[Pkg$TimeSpent!=0,-2]
# Renaming column
names(Proj)[1] = names(Pkg)[1]
# Grouping all together
PkgProj = rbind(Pkg,Proj)
View(PkgProj)
View(Proj)
View(Proj)
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
View(ProjDF)
TEMP <- ProjDF[ProjDF$ProjectLvl="259165701",]
TEMP <- ProjDF[ProjDF$ProjectLvl=="259165701",]
View(TEMP)
paste(unique(TEMP$Workers[!is.na(TEMP$Workers)]),collapse=",")
toString(dQuote(TEMP$Workers, FALSE))
toString(dQuote(unique(TEMP$Workers[!is.na(TEMP$Workers)]), FALSE))
?substr
ifelse(substr(Proj$Workers, 1, 1) == ",", sub("^,", "", Proj$Workers), Proj$Workers)
Proj$Workers <- ifelse(substr(Proj$Workers, 1, 1) == ",", sub("^,", "", Proj$Workers), Proj$Workers)
View(Proj)
Idx <- grepl("C-", DF$ProjectID)
ConsultDF <- DF[Idx,]
ProjDF <- DF[!Idx,]
# Focusing on package level
Pkg = ProjDF %>%
group_by(PackageLvl,ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Pkg = Pkg[!is.na(Pkg$TimeSpent),]
# Focusing on project level
Proj = ProjDF %>%
group_by(ProjectLvl) %>%
summarise(TimeSpent=sum(TimeSpent, na.rm=T),
Workers = paste(unique(Workers[!is.na(Workers)]),collapse=","))
Proj$Workers <- ifelse(substr(Proj$Workers, 1, 1) == ",", sub("^,", "", Proj$Workers), Proj$Workers)
# Removing lines with values = 0
Pkg = Pkg[Pkg$TimeSpent!=0,-2]
# Renaming column
names(Proj)[1] = names(Pkg)[1]
# Grouping all together
PkgProj = rbind(Pkg,Proj)
# Changing data type
PkgProj$PackageLvl = as.integer(as.character(PkgProj$PackageLvl))
# Joining the two dataframes
ProjDF <- left_join(ProjDF, PkgProj, by = c("UniqueCode" = "PackageLvl")) %>%
mutate(TimeSpent.x = coalesce(TimeSpent.x,TimeSpent.y)) %>% # Regrouping the columns
mutate(Workers.x = coalesce(Workers.x,Workers.y)) %>%
setnames(c("TimeSpent.x","Workers.x"), c("TimeSpent","Workers")) %>%
select(-TimeSpent.y, -Workers.y)
View(ProjDF)
runApp('Shiny_PF_V2.7.R')
# Computing different calculations based on filtering parameters
DataUp <- Calculations(DataUp)
runApp('Shiny_PF_V2.7.R')
DataTab
head(DataTab)
setnames(DataTab,OldCols,NewCols,skip_absent=T)
head(DataTab)
runApp('Shiny_PF_V2.7.R')
runApp('Shiny_PF_V2.7.R')
# Load internal functions
sapply(list.files(pattern="[.]R$", path="Functions/", full.names=TRUE), source)
getwd()
list.files(pattern="[.]R$", path="Functions/", full.names=TRUE)
# Check if depencies are installed
new.packages <- c("pacman", "remotes")[!(c("pacman", "remotes") %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load/install the necessary packages
invisible(lapply(c("pacman","remotes"), require, character.only = TRUE))
if (!"pf" %in% installed.packages()) {remotes::install_local("R:/Projectfacts/ODBC/pf_app/")}
Pkgs = c("rmarkdown", "shiny", "shinydashboard", "visNetwork", "scales", "igraph",
"rmarkdown","foreach", "pf","stringr","reshape2","dplyr","lubridate",
"tidyr","ggplot2","cowplot", "scales", "grid", "gridExtra", "shinyjs",
"DT", "data.table")
pacman::p_load(char = Pkgs, install = T, update = F, character.only = T)
# Load internal functions
sapply(list.files(pattern="[.]R$", path="Functions/", full.names=TRUE), source)
# TO DO:
runApp('Shiny_PF_V2.7.R')
View(BuildTable)
runApp('Shiny_PF_V2.7.R')
library(shiny); runApp('Shiny_PF_V2.8.R')
library(shiny); runApp('Shiny_PF_V2.8.R')
runApp('~/TEMP.R')
runApp('~/TEMP.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
grepl("P-",input$node_id)
unique(AllData()$DataUp$Workers)
IdxWorker <- AllData()$DataUp$Workers=="André Moser"
any()
any(IdxWorker )
BuildTable(AllData()$DataUp[IdxWorker,Cols])
dim(AllData()$DataUp[IdxWorker,Cols])
dim(AllData()$DataUp[IdxWorker,Cols])
BuildTable(AllData()$DataUp[IdxWorker,Cols])
# Isolating columns useful for this table
# DataTab = DataTab[,c("ProjectID","ProjectName","Service","ProdDate","TimeSpent","TimeBudget","TimePercent","Fraction","Levels")]
DataTab[,"ProjectID"] = droplevels(DataTab[,"ProjectID"]) # Removing unused factorS levels
DataTab[DataTab$Levels == 1,"ProdDate"] = NA # No need to duplicate the productive date
DataTab
BuildTable(AllData()$DataUp[IdxWorker,Cols])
# Isolating columns useful for this table
# DataTab = DataTab[,c("ProjectID","ProjectName","Service","ProdDate","TimeSpent","TimeBudget","TimePercent","Fraction","Levels")]
DataTab[,"ProjectID"] = droplevels(DataTab[,"ProjectID"]) # Removing unused factorS levels
BuildTable(AllData()$DataUp[IdxWorker,Cols])
# Isolating columns useful for this table
# DataTab = DataTab[,c("ProjectID","ProjectName","Service","ProdDate","TimeSpent","TimeBudget","TimePercent","Fraction","Levels")]
DataTab[,"ProjectID"] = droplevels(DataTab[,"ProjectID"]) # Removing unused factorS levels
View(DataTab)
TEMP <- AllData()$DataUp[IdxWorker,Cols]
View(TEMP)
head(AllData()$DataUp$Workers)
# IdxWorker <- AllData()$DataUp$Workers=="André Moser"
IdxWorker <- grepl(input$node_id,AllData()$DataUp$Workers,ignore.case = T)
IdxWorker <- grepl("André Moser",AllData()$DataUp$Workers,ignore.case = T)
sum(IdxWorker)
which(IdxWorker==T)
IdxWorker <- grepl("André Moser",AllData()$DataUp$Workers,ignore.case = T)
TEMP = AllData()$DataUp[IdxWorker,Cols]
View(TEMP)
BuildTable(AllData()$DataUp[IdxWorker,Cols])
# Load internal functions
sapply(list.files(pattern="[.]R$", path="Functions/", full.names=TRUE), source)
runApp('Shiny_PF_V2.8.R')
paste("A", "B")
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
?bs_theme
?bs_theme
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
fontawesome:::fa_tbl
TEMP = fontawesome:::fa_tbl
View(TEMP)
icon("calendar")
icon("magnifying-glass")
icon("search")
runApp('Shiny_PF_V2.8.R')
renv::snapshot()
library(shiny); runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('~/TEMP.R')
runApp('Shiny_PF_V2.8.R')
All_Tabs = getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractDataNEW(All_Tabs)
# Filter data
View(Data)
runApp('Shiny_PF_V2.8.R')
??JS
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
ConvertTime("200")
ConvertTime(200)
Vector = 200
# Using suppressWarnings to bypass sprintf warning message: "NAs introduced by coercion"
Split = suppressWarnings(do.call(rbind, strsplit(sprintf("%.2f",as.integer(Vector)/60),"\\.")))
Split[,2] = suppressWarnings(as.character(sprintf("%02d", as.integer(Split[,2])))) # Add leading zeros
length(Split[,2])
nchar(Split[,2])
nchar(Split[,2]<2)
nchar(Split[,2])<2
Time = suppressWarnings(paste0(Split[,1],":",as.character(sprintf("%02d", round(as.integer(Split[,2])*0.6)))))
ggColorHue(3)
StandardDates(c("02-02-2022"))
StandardDates(c("02.02.2022"))
StandardDates(c("02.02.2022","12.21.2022"))
StandardDates("12.21.2022")
StandardDates("2022-12-01")
themeShiny(titleSize = 12)
TEMP = themeShiny(titleSize = 12)
runApp('Shiny_PF_V2.8.R')
# Check if dependencies are installed
new.packages <- c("pacman", "remotes")[!(c("pacman", "remotes") %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load/install the necessary packages
invisible(lapply(c("pacman","remotes"), require, character.only = TRUE))
if (!"pf" %in% installed.packages()) {remotes::install_local("R:/Projectfacts/ODBC/pf_app/")}
Pkgs = c("rmarkdown", "shiny", "shinydashboard", "visNetwork", "scales", "igraph",
"rmarkdown","foreach", "pf","stringr","reshape2","dplyr","lubridate",
"tidyr","ggplot2","cowplot", "scales", "grid", "gridExtra", "shinyjs",
"DT", "data.table")
pacman::p_load(char = Pkgs, install = T, update = F, character.only = T)
# Load internal functions
sapply(list.files(pattern="[.]R$", path="Functions/", full.names=TRUE), source)
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# Filter data
Data <- filterData(Data, All_Tabs)
Data$Filt <- grepl("\\.|C-", Data$ProjectID)
# Free-up memory space
remove(All_Tabs)
# Changing data type
Data[,c("ProjectIDs","ProjectNames","State")] <- lapply(Data[,c("ProjectIDs","ProjectNames","State")], as.character)
# Dataframe with type of projects and corresponding patterns
ProjTypes.df <- data.frame(Name = c("External", "Consulting","Internal","Internal","FTE"),
Pattern = c("P-","C-","I-","IB-","FTE-"))
ProjStr <- c("P-","C-","I-","IB-","FTE-")
# values to show, or not show, these will be the 'choices' and 'selected' values
# for the checkboxGroupInput()
AllRows <- 1:dim(Data)[2]
names(AllRows) <-colnames(Data)
SelectRows <- AllRows[c(1,3,4,8,18,20,21,22,23,24)]
ProjLabs.df <- data.frame(Name = input$projecttype)
runApp('Shiny_PF_V2.8.R')
# Computing different calculations based on filtering parameters
DataUp <- Calculations(DataUp)
## Preparing data for network
# Creating a separate database for the plot (not to mess with the Markdown report data)
# Removing the lines corresponding to the project level (the aim is to separate for each division)
DataPlot <- DataUp[DataUp$Filt,]
# lock in factor level order
DataPlot$State <- factor(DataPlot$State, levels = unique(DataPlot$State))
# Color palette
Colors <- ggColorHue(length(unique(DataPlot$State))+1)
# Colors dataframe
Colors.df <- data.frame(id = seq(1,length(levels(DataPlot$State))+1),
label = c("Workers", levels(DataPlot$State)),
color = Colors)
# Project type
Projtype <- paste0("Project",input$projectlab) # Determined from radiobutton
UniqueProj <- unique((DataPlot[,Projtype])) # List of unique projects
# Edges
Edges <- data.frame(from = DataPlot$Workers,
to = DataPlot[,Projtype],
width = rescale(DataPlot$TimeSpent, to=c(0,10)))
# Nodes
Nodes <- data.frame(id = c(unique(DataPlot$Workers),unique(DataPlot[,Projtype])),
label = c(unique(DataPlot$Workers),unique(DataPlot[,Projtype])),
group = c(rep("Workers",length(unique(DataPlot$Workers))),(as.character(DataPlot$State[match(unique(DataPlot[,Projtype]), DataPlot[,Projtype])]))),
value = c(rep(10,length(unique(DataPlot$Workers))),rescale(foreach(k=1:length(UniqueProj), .combine='c') %do%
sum(DataPlot$TimeSpent[which(DataPlot[,Projtype] == UniqueProj[k])], na.rm = T), to=c(0,1000))),
shape = c(rep("square",length(unique(DataPlot$Workers))),rep("dot",length(unique((DataPlot[,Projtype]))))))
# Remove lines containing NA (under ID column)
Nodes <- Nodes[!is.na(Nodes$id),]
Nodes$color <- lapply(Nodes$group, function(x) Colors.df$color[match(x, Colors.df$label)]) # Custom colors
# lock in factor level order
Nodes$group <- factor(Nodes$group, levels = unique(Nodes$group))
## Preparing data for table
# Flag to determine which lines correspond to the top level
DataUp$Levels <- grepl("-", DataUp$ProjectID)==T
# Adding the fraction column
# Indicate the percentage of TimeSpent on a project compared to all projects
ProjIdx <- which(DataUp$Levels==T)
SumTimeSpent <- sum(DataUp$TimeSpent[ProjIdx],na.rm=T)
DataUp$Fraction <- rep(NA,dim(DataUp)[1]) # Populate the new column with NAs
DataUp$Fraction[ProjIdx] <- DataUp$TimeSpent[ProjIdx]/SumTimeSpent*100
# Convert time to HH:MM
DataUp[,c("TimeSpent","TimeBudget")] <- lapply(DataUp[,c("TimeSpent","TimeBudget")], ConvertTime)
# Convert time to HH:MM
DataUp[,c("TimeSpent","TimeBudget")] <- lapply(DataUp[,c("TimeSpent","TimeBudget")], ConvertTime)
Split
TEMP = Split
TEMP[,2] = suppressWarnings(as.character(sprintf("%02d", as.integer(Split[,2]))))} # Add leading zeros
TEMP[,2] = suppressWarnings(as.character(sprintf("%02d", as.integer(Split[,2]))))
identical(Split, TEMP)
# Load internal functions
sapply(list.files(pattern="[.]R$", path="Functions/", full.names=TRUE), source)
(pattern="[.]R$", path="Functions/", full.names=TRUE)
# Convert time to HH:MM
DataUp[,c("TimeSpent","TimeBudget")] <- lapply(DataUp[,c("TimeSpent","TimeBudget")], ConvertTime)
list.files(pattern="[.]R$", path="Functions/", full.names=TRUE)
sapply(list.files(pattern="[.]R$", path="Functions/", full.names=TRUE), source)
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('Shiny_PF_V2.8.R')
runApp('~/TEMP.R')
runApp('R:/Projectfacts/Reports/1001_DLF_money/Corentin/Shiny_PF_V2.8.R')
remotes::install_local("R:/Projectfacts/ODBC/pf_app/")
getwd()
setwd("R:/Projectfacts/CTUNetwork")
install()
library(devtools)
install()
CTUNetwork::runCTUNetworkApp()
getwd()
devtools::document()
library(CTUNetwork)
CTUNetwork::runCTUNetworkApp()
install.packages("visNetwork")
install.packages("visNetwork")
packageVersion("visNetwork")
CTUNetwork::runCTUNetworkApp()
library(CTUNetwork)
CTUNetwork::runCTUNetworkApp()
.Library"
""
.Library
C:/PROGRA~1/R/R-42~1.1/library
.Library
