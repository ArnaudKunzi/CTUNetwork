# dplyr::mutate(SUMBRUTTO = SUMBRUTTO - MoneyBudget) %>% # For an unknown reason SUMBRUTTO is the sum of money spent + money budgeted
dplyr::mutate(FixedCosts = FixedCosts) %>%
dplyr::select(-SUMBRUTTO)
Data <- dplyr::left_join(Data, InvoicesPkgLvl, by = c("UniqueCode" = "FK_PROJECT")) %>%
# dplyr::mutate(SUMBRUTTO = SUMBRUTTO - MoneyBudget) %>% # For an unknown reason SUMBRUTTO is the sum of money spent + money budgeted
dplyr::mutate(FixedCosts = SUMBRUTTO) %>%
dplyr::select(-SUMBRUTTO)
Data$MoneySpent <- replace(Data$FixedCosts, duplicated(Data$UniqueCode), NA)
Data$MoneyBudget <- replace(Data$MoneyBudget, duplicated(Data$UniqueCode), NA)
dim(All_Tabs$financeposition)
library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# Disable dplyr warning message
options(dplyr.summarise.inform = FALSE)
# Extracting useful data from All_Tabs and storing them into data-frames
TimeBooking.df <- All_Tabs$activitydata[,c("FK_PROJECT","FK_WORKER","Timespent_billable","BookedDate")]
# InvoicesPkgLvl.df <- All_Tabs$financeposition # Amounts in invoices at work package level
Workers.df <- All_Tabs$worker # List of workers
# aggregating the project dataframe with corresponding timebookings
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT")) %>%
dplyr::rename(Workers = FK_WORKER, TimeSpent = "Timespent_billable") # renaming new columns
Data <- Data[,c(1:19,28,20,21,29,27,22:26)]# Reordering columns
# See: https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/join
# Replacing the Workers code by names
Data <- dplyr::left_join(Data, Workers.df[,c("PK_Worker","ShowName")], by = c("Workers" = "PK_Worker"))
Data$Workers <- Data$ShowName
Data <- Data[,-dim(Data)[2]]
# converting strings as dates
Data$BookedDate <- as.Date(Data$BookedDate,format="%Y-%m-%d")
# Moving the ProdDate to the package level for each project
# Using pmin instead of min to avoid warnings related to inf values
# https://stackoverflow.com/questions/46289577/summarise-returning-inf-when-using-na-rm-true
TEMP <- Data %>% dplyr::group_by(ProjectLvl,PackageLvl) %>%
dplyr::summarize(pmin(unique(ProdDate[!is.na(ProdDate)]), na.rm = T)) %>%
dplyr::rename(ProdDateNew =`pmin(unique(ProdDate[!is.na(ProdDate)]), na.rm = T)`)
TEMP[,-3] <- lapply(TEMP[,-3], function(x) as.integer(as.character(x)))
TEMP <- reshape2::melt(TEMP, id.vars=c("ProdDateNew")) # From wide to long format
Data <- dplyr::left_join(Data, TEMP[,-2], by = c("UniqueCode" = "value"))
# Regrouping the columns
Data <- Data %>% dplyr::mutate(ProdDate = dplyr::coalesce(ProdDate,ProdDateNew))
Data <- Data[,-dim(Data)[2]]
# 3) EXTRACTING COSTS AND DATASET CLEANING ####
# -------------------------------------------------------------------------- #
# FIXED COSTS
# Took the gross value (SUMBRUTTO) since to determine if DLF is reached, VTA should not be included
# In either $financeposition or $financearticle
# BILLINGTYPE --> 0 = Fixed costs
#                 3 & 4 = Hourly costs
# Need to filter for dates here
# Invoices at project level
# InvoicesProjLvl <- All_Tabs$financerecord %>%
#   dplyr::group_by(FK_PROJECT) %>%
#   dplyr::summarize(SUMBRUTTO_FC=sum(SUMBRUTTO_FC, na.rm=T))
# Data <- dplyr::left_join(Data, InvoicesProjLvl, by = c("UniqueCode" = "FK_PROJECT")) %>%
#   dplyr::mutate(MoneySpent = SUMBRUTTO_FC) %>% # For an unknown reason SUMBRUTTO is the sum of money spent + money budgeted
#   dplyr::select(-SUMBRUTTO_FC)
# Fixed costs
InvoicesPkgLvl <- All_Tabs$financeposition[All_Tabs$financeposition$BILLINGTYPE == 0,] %>%
dplyr::group_by(FK_PROJECT) %>%
dplyr::summarize(SUMBRUTTO=sum(SUMBRUTTO, na.rm=T))
Data <- dplyr::left_join(Data, InvoicesPkgLvl, by = c("UniqueCode" = "FK_PROJECT")) %>%
# dplyr::mutate(SUMBRUTTO = SUMBRUTTO - MoneyBudget) %>% # For an unknown reason SUMBRUTTO is the sum of money spent + money budgeted
dplyr::mutate(FixedCosts = SUMBRUTTO) %>%
dplyr::select(-SUMBRUTTO)
Data$FixedCosts <- replace(Data$FixedCosts, duplicated(Data$UniqueCode), NA)
Data$MoneyBudget <- replace(Data$MoneyBudget, duplicated(Data$UniqueCode), NA)
# TEST TO ISOLATE THE FIXED COSTS of project P-1109 (259266894)
TESTVect = unique(Data$UniqueCode[which(Data$ProjectLvl==259266894 & grepl("\\.", Data$ProjectID))])
TEMP = InvoicesPkgLvl.df[which(InvoicesPkgLvl.df$FK_PROJECT %in% TESTVect),]
TEMP = InvoicesPkgLvl[which(InvoicesPkgLvl$FK_PROJECT %in% TESTVect),]
# TEST TO ISOLATE THE FIXED COSTS of project P-1109 (259266894)
TESTVect = unique(Data$UniqueCode[which(Data$ProjectLvl==259266894 & grepl("\\.", Data$ProjectID))])
TEMP = InvoicesPkgLvl[which(InvoicesPkgLvl$FK_PROJECT %in% TESTVect),]
View(TEMP)
TEMP = All_Tabs$financeposition[which(All_Tabs$financeposition$FK_PROJECT %in% TESTVect),]
View(TEMP)
665.00 + 665.00
# TEST TO ISOLATE THE FIXED COSTS of project P-1109 (259266894)
TEMPDF = Data[Data$ProjectLvl==259266894,]
View(TEMPDF)
names(All_Tabs$activitydata)
TimeBooking.df <- All_Tabs$activitydata
View(TimeBooking.df)
TESTVect = unique(Data$UniqueCode[which(Data$ProjectLvl==259266894 & grepl("\\.", Data$ProjectID))])
TESTVect
135*90
135/60*90
213.75*60/135
View(TEMPDF)
library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# Disable dplyr warning message
options(dplyr.summarise.inform = FALSE)
# Extracting useful data from All_Tabs and storing them into data-frames
TimeBooking.df <- All_Tabs$activitydata[,c("FK_PROJECT","FK_WORKER","Timespent_billable","BookedDate", "INCOMEFROMINVOICE_BILLABLE")]
Workers.df <- All_Tabs$worker # List of workers
View(TimeBooking.df)
# aggregating the project dataframe with corresponding timebookings
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT")) %>%
dplyr::rename(Workers = FK_WORKER, TimeSpent = "Timespent_billable") # renaming new columns
View(Data)
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT"))
View(Data)
library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# Disable dplyr warning message
options(dplyr.summarise.inform = FALSE)
# Extracting useful data from All_Tabs and storing them into data-frames
TimeBooking.df <- All_Tabs$activitydata[,c("FK_PROJECT","FK_WORKER","Timespent_billable","BookedDate", "INCOMEFROMINVOICE_BILLABLE")]
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT"))
?rename
# aggregating the project dataframe with corresponding timebookings
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT")) %>%
dplyr::rename(Workers = "FK_WORKER", TimeSpent = "Timespent_billable", MoneySpent = INCOMEFROMINVOICE_BILLABLE) # renaming new columns
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT"))
View(Data)
library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# Disable dplyr warning message
options(dplyr.summarise.inform = FALSE)
# Extracting useful data from All_Tabs and storing them into data-frames
TimeBooking.df <- All_Tabs$activitydata[,c("FK_PROJECT","FK_WORKER","Timespent_billable","BookedDate", "INCOMEFROMINVOICE_BILLABLE")]
TEST <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT"))
View(TEST)
TEST <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT")) %>%
dplyr::rename(Workers = "FK_WORKER", TimeSpent = "Timespent_billable") %>%  # renaming new columns
dplyr::mutate(MoneySpent = INCOMEFROMINVOICE_BILLABLE) %>%
dplyr::select(-INCOMEFROMINVOICE_BILLABLE)
View(TEST)
Data <- dplyr::left_join(Data, TimeBooking.df, by = c("UniqueCode" = "FK_PROJECT")) %>%
dplyr::rename(Workers = "FK_WORKER", TimeSpent = "Timespent_billable") %>%  # renaming new columns
dplyr::mutate(HourlyCosts = INCOMEFROMINVOICE_BILLABLE) %>%
dplyr::select(-INCOMEFROMINVOICE_BILLABLE)
Data <- Data[,c(1:19,28,20,21,29,27,22:26)]# Reordering columns
View(Data)
# Replacing the Workers code by names
Data <- dplyr::left_join(Data, All_Tabs$worker[,c("PK_Worker","ShowName")], by = c("Workers" = "PK_Worker"))
Data$Workers <- Data$ShowName
Data <- Data[,-dim(Data)[2]]
# converting strings as dates
Data$BookedDate <- as.Date(Data$BookedDate,format="%Y-%m-%d")
# Moving the ProdDate to the package level for each project
# Using pmin instead of min to avoid warnings related to inf values
# https://stackoverflow.com/questions/46289577/summarise-returning-inf-when-using-na-rm-true
TEMP <- Data %>% dplyr::group_by(ProjectLvl,PackageLvl) %>%
dplyr::summarize(pmin(unique(ProdDate[!is.na(ProdDate)]), na.rm = T)) %>%
dplyr::rename(ProdDateNew =`pmin(unique(ProdDate[!is.na(ProdDate)]), na.rm = T)`)
TEMP[,-3] <- lapply(TEMP[,-3], function(x) as.integer(as.character(x)))
TEMP <- reshape2::melt(TEMP, id.vars=c("ProdDateNew")) # From wide to long format
Data <- dplyr::left_join(Data, TEMP[,-2], by = c("UniqueCode" = "value"))
# Regrouping the columns
Data <- Data %>% dplyr::mutate(ProdDate = dplyr::coalesce(ProdDate,ProdDateNew))
Data <- Data[,-dim(Data)[2]]
# 3) EXTRACTING FIXED COSTS AND DATASET CLEANING ####
# -------------------------------------------------------------------------- #
# FIXED COSTS
# Took the gross value (SUMBRUTTO) since to determine if DLF is reached, VTA should not be included
# In either $financeposition or $financearticle
# BILLINGTYPE --> 0 = Fixed costs
#                 3 & 4 = Hourly costs
# Fixed costs
InvoicesPkgLvl <- All_Tabs$financeposition[All_Tabs$financeposition$BILLINGTYPE == 0,] %>%
dplyr::group_by(FK_PROJECT) %>%
dplyr::summarize(SUMBRUTTO=sum(SUMBRUTTO, na.rm=T))
Data <- dplyr::left_join(Data, InvoicesPkgLvl, by = c("UniqueCode" = "FK_PROJECT")) %>%
# dplyr::mutate(SUMBRUTTO = SUMBRUTTO - MoneyBudget) %>% # For an unknown reason SUMBRUTTO is the sum of money spent + money budgeted
dplyr::mutate(FixedCosts = SUMBRUTTO) %>%
dplyr::select(-SUMBRUTTO)
Data$FixedCosts <- replace(Data$FixedCosts, duplicated(Data$UniqueCode), NA)
Data$MoneyBudget <- replace(Data$MoneyBudget, duplicated(Data$UniqueCode), NA)
# TEST TO ISOLATE THE FIXED COSTS of project P-1109 (259266894)
# TEMPDF = Data[Data$ProjectLvl==259266894,]
# TESTVect = unique(Data$UniqueCode[which(Data$ProjectLvl==259266894 & grepl("\\.", Data$ProjectID))])
# TEMP = All_Tabs$financeposition[which(All_Tabs$financeposition$FK_PROJECT %in% TESTVect),]
# Changing data format
Cols <- c("ProjectID","Service","CDMS","State","DLFReached","CustomerID","Manager")
Data[,Cols] <- lapply(Data[,Cols],factor)
# Replacing incoherent information (i.e.., duplicates)
UniquePkgs <- split(seq_along(Data$UniqueCode), Data$UniqueCode)
UniquePkgs <- UniquePkgs[lapply(UniquePkgs, length)>1] # Only keeping repeated codes
# Removing repeated information (but not for first instance since it's the higher package level)
UniquePkgs <- as.integer(unlist(lapply(UniquePkgs, function(x) x[-1])))
Data[UniquePkgs,c("TimeBudget","WorkerRate")] = NA
View(Data)
gc()
runApp('inst/shinyApp')
DataUp = DataUp
Data = DataUp
# Cumulative sum over package and project levels
Data <- CTUNetwork::AvgTimeBookings(Data)
# Adding up FixedCosts and HourlyCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","HourlyCosts")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
# Computing the percentage of time worked/time budgeted
Data$TimePercent <- Data$TimeSpent/Data$TimeBudget*100
# Reordering the database according to natural order
Data <- Data[stringr::str_order(Data$ProjectIDs),]
View(Data)
devtools::build(); devtools::install()
devtools::build(); devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build()
devtools::install()
devtools::build(); devtools::install()
library(CTUNetwork)
shiny::runApp('inst/shinyApp')
Data = DataUp
# Cumulative sum over package and project levels
Data <- CTUNetwork::AvgTimeBookings(Data)
# Computing the hourly costs (time X worker rate)
# Data$HourlyCosts <- Data$TimeSpent/60 * Data$WorkerRate
# Adding up FixedCosts and HourlyCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","HourlyCosts")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
# Computing the percentage of time worked/time budgeted
Data$TimePercent <- Data$TimeSpent/Data$TimeBudget*100
# Reordering the database according to natural order
Data <- Data[stringr::str_order(Data$ProjectIDs),]
View(Data)
# Extracting useful data from All_Tabs and storing them into data-frames
TimeBooking.df <- All_Tabs$activitydata[,c("FK_PROJECT","FK_WORKER","Timespent_billable","BookedDate", "INCOMEFROMINVOICE")]
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Extracting useful data from All_Tabs and storing them into data-frames
TimeBooking.df <- All_Tabs$activitydata[,c("FK_PROJECT","FK_WORKER","Timespent_billable","BookedDate", "INCOMEFROMINVOICE")]
View(TimeBooking.df)
15*95
15/60*95
15/60*90
15/60*85
15/60*80
15/60*75
15/60*70
TEST = All_Tabs$activitydata
View(TEST)
runApp('inst/shinyApp')
View(DataUp)
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(CTUNetwork)
shiny::runApp('inst/shinyApp')
View(DataUp)
TEST = Data[Data$ProjectLvl == 259266894,]
View(TEST)
TEST = DataUp[DataUp$ProjectLvl == 259266894,]
View(TEST)
sum(TEST$MoneySpent)
sum(TEST$MoneySpent, na.rm = T)
sum(TEST$MoneySpent[TEST$Filt==T], na.rm = T)
sum(TEST$MoneySpent[nchar(TEST$ProjectID)==3, na.rm = T)
sum(TEST$MoneySpent[nchar(TEST$ProjectID)==3], na.rm = T)
sum(TEST$MoneySpent[nchar(TEST$ProjectID)==3], na.rm = T)
head(TEST$ProjectID)
sum(TEST$MoneySpent[nchar(as.character(TEST$ProjectID))==3], na.rm = T)
sum(TEST$MoneySpent[grepl("001.", TEST$ProjectID)], na.rm = T)
TEMP = All_Tabs$financearticle...
TEMP = All_Tabs$financearticle
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
TEMP = All_Tabs$financearticle
View(TEMP)
TEMP = All_Tabs$financeposition
View(TEMP)
# Determine if DLF is reached (MoneySpent > 3000CHF)
Idx = grepl("P-", Data$ProjectID)
Data$DLFReached[Idx] <- ifelse(Data$MoneySpent[Idx] > 3000, TRUE, FALSE)
Data = DataUp
# Determine if DLF is reached (MoneySpent > 3000CHF)
Idx = grepl("P-", Data$ProjectID)
Data$DLFReached[Idx] <- ifelse(Data$MoneySpent[Idx] > 3000, TRUE, FALSE)
any(Idx)
Idx
# Determine if DLF is reached (MoneySpent > 3000CHF)
Idx = which(grepl("P-", Data$ProjectID))
Data$DLFReached[Idx] <- ifelse(Data$MoneySpent[Idx] > 3000, TRUE, FALSE)
Data$MoneySpent[Idx] > 3000
Idx
Data$DLFReached
as.logical(NA)
Data$DLFReached <- as.logical(Data$DLFReached)
Data$DLFReached[Idx] <- ifelse(Data$MoneySpent[Idx] > 3000, TRUE, FALSE)
View(Data)
devtools::build();devtools::install()
devtools::build(); devtools::install();CTUNetwork::runCTUNetworkApp()
devtools::build(); devtools::install()
shiny::runApp('inst/shinyApp')
View(Data)
runApp('inst/shinyApp')
head( AllData()$DataUp)
TEMP = AllData()$DataUp
head(TEMP$Workers[AllData()$DataUp$Filt == F])
TEMP$Workers[AllData()$DataUp$Filt == F] <- NA
View(TEMP)
TEMP = AllData()$DataUp
TEMP$Workers[grepl("\\,", TEMP$Workers)] <- NA
View(TEMP)
gc()
devtools::build(); devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
library(CTUNetwork)
devtools::build();devtools::install()
library(CTUNetwork)
devtools::build();devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
# Removing the list of all workers at the project level (useless)
Idx = grepl("\\,", AllData()$DataUp$Workers)
DataUpTab[Idx] <- AllData()$DataUp$Workers[Idx] <- NA
AllData()$DataUp$Workers[Idx] <- NA
AllData()$DataUp$Workers[Idx]
# Removing the list of all workers at the project level (useless)
DataUpTab <- AllData()$DataUp
Idx = grepl("\\,", DataUpTab$Workers)
DataUpTab$Workers[Idx] <- NA
DataUpTab$Workers[Idx]
gc()
devtools::build();devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
View(DataUpTab)
str(DataUpTab$DLFSupport)
str(DataUpTab$DLFReached)
as.factor(DataUpTab$DLFReached)
# No need to repeat the DLF support value
DataUpTab$DLFSupport[DataUpTab$Levels==F] <- NA
View(DataUpTab)
str(DataUpTab$DLFSupport)
str(DataUpTab$DLFReached)
devtools::build();devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build();devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build();devtools::install()
library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
Data <- DataUp
# Adding up FixedCosts and HourlyCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","HourlyCosts")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
# Cumulative sum over package and project levels
Data <- CTUNetwork::AvgTimeBookings(Data)
# Computing the percentage of time worked/time budgeted
Data$TimePercent[!Data$Filt] <- Data$TimeSpent[!Data$Filt]/Data$TimeBudget[!Data$Filt]*100
View(Data)
devtools::build();devtools::install()
library(CTUNetwork)
CTUNetwork::runCTUNetworkApp()
runApp('inst/shinyApp')
Data = DataUp
View(Data)
# Adding up FixedCosts and HourlyCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","HourlyCosts")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
# Cumulative sum over package and project levels
Data <- CTUNetwork::AvgTimeBookings(Data)
# Computing the percentage of time worked/time budgeted
Data$TimePercent[!Data$Filt] <- Data$TimeSpent[!Data$Filt]/Data$TimeBudget[!Data$Filt]*100
# Reordering the database according to natural order
Data <- Data[stringr::str_order(Data$ProjectIDs),]
View(Data)
View(Data)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
head(TEMP$MoneySpent)
Data = DataUp
# Adding up FixedCosts and HourlyCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","HourlyCosts")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
DF = Data
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
Data = DataUp
# Cumulative sum over package and project levels
Data <- AvgTimeBookings(Data)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
Data = DataUp
# Cumulative sum over package and project levels
Data$MoneySpent <- Data$HourlyCosts
Data <- AvgTimeBookings(Data)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
# Adding up FixedCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","MoneySpent")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
TEMP = Data[Data$ProjectIDs=="P-0634",]
head(TEMP$MoneySpent)
View(TEMP)
Data = DataUp
# Cumulative sum over package and project levels
# Data$MoneySpent <- Data$HourlyCosts
Data$MoneySpent[Data$Filt == T] <- rowSums(Data[Data$Filt == T, c("FixedCosts","HourlyCosts")], na.rm=T)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
which(!is.na(TEMP$FixedCosts))
Data <- AvgTimeBookings(Data)
# Adding up FixedCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","MoneySpent")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
TEMP$MoneySpent[2]
TEMP$MoneySpent[2]-5760
Data = DataUp
Data$MoneySpent <- Data$HourlyCosts
# Data$MoneySpent[Data$Filt == T] <- rowSums(Data[Data$Filt == T, c("FixedCosts","HourlyCosts")], na.rm=T)
Data <- AvgTimeBookings(Data)
# Adding up FixedCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","MoneySpent")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
TEMP = Data[Data$ProjectIDs=="P-0634",]
TEMP$MoneySpent[2]
169435.3 + 5760
View(TEMP)
Data = DataUp
Data$MoneySpent <- Data$HourlyCosts
# Data$MoneySpent[Data$Filt == T] <- rowSums(Data[Data$Filt == T, c("FixedCosts","HourlyCosts")], na.rm=T)
Data <- AvgTimeBookings(Data)
# Adding up FixedCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","MoneySpent")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
Data = DataUp
Data$MoneySpent[Data$Filt == T] <- rowSums(Data[Data$Filt == T, c("FixedCosts","HourlyCosts")], na.rm=T)
Data <- AvgTimeBookings(Data)
# Adding up FixedCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","MoneySpent")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
runApp()
runApp('inst/shinyApp')
Data$MoneySpent[Data$Filt == T] <- rowSums(Data[Data$Filt == T, c("FixedCosts","HourlyCosts")], na.rm=T)
Data <- AvgTimeBookings(Data)
# Adding up FixedCosts
Data$MoneySpent <- rowSums(Data[,c("FixedCosts","MoneySpent")], na.rm=T)
Data$MoneySpent  <- ifelse(Data$MoneySpent==0,NA,Data$MoneySpent)
TEMP = Data[Data$ProjectIDs=="P-0634",]
View(TEMP)
devtools::build(); devtools::install()
