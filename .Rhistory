# visNetwork::visIgraphLayout(layout = params$layout, physics = params$physics, circular = params$circular, randomSeed = 1234)  %>% # Probably the best one !
# visIgraphLayout(layout = "layout_with_fr", physics = F, randomSeed = 1234)  %>% # the default one
# visIgraphLayout(layout = "layout_with_kk", physics = T, randomSeed = 1234)  %>% # Good one
# visIgraphLayout(layout = "layout_with_mds", physics = T, randomSeed = 1234)  %>% # Nicest one I believe
visNetwork::visOptions(highlightNearest = T, nodesIdSelection = list(enabled = TRUE, main = "Select Worker/Project"),
selectedBy = list(variable="group", main = "Select State")) %>% #, multiple=T
visNetwork::visPhysics(solver = "hierarchicalRepulsion", hierarchicalRepulsion = list(springLength = 850, nodeDistance = 90), stabilization = "onlyDynamicEdges") %>%
visNetwork::visNodes(shapeProperties = list(interpolation = F)) %>%
visNetwork::visEdges(smooth = F, color=list(color = "#848484", highlight = "#000000")) %>%
visNetwork::visEvents(selectNode = "function(nodes) {
Shiny.onInputChange('node_id', nodes.nodes);
openBox('Bargraphs');
;}",
deselectNode = "function(){
closeBox('Bargraphs');
}") %>%
# See: https://stackoverflow.com/questions/74768667/visnetwork-visevents-javascript-to-uncollapse-box
{if (params$layout == "layout.reingold.tilford")
visNetwork::visIgraphLayout(layout = "layout.reingold.tilford", physics = params$physics, circular = T, randomSeed = 1234)
else
visNetwork::visIgraphLayout(layout = params$layout, physics = params$physics, randomSeed = 1234)}
devtools::build(); devtools::install(); library(CTUNetwork)
shiny::runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?pickerInput
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
# 1. Network plot
output$mynetworkid <- visNetwork::renderVisNetwork(
NetworkPlot(AllData()$Nodes, AllData()$Edges, params = GraphParams())
)
View(output)
rlang::last_error()
GraphParams()
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::install_github("shinyWidgets")
remotes::install_github("dreamRs/shinyWidgets")
runApp('inst/shinyApp')
install.packages(c("cli", "highr", "htmlwidgets", "isoband", "officer", "purrr", "xfun"))
install.packages(c("cli", "highr", "htmlwidgets", "isoband", "officer", "purrr", "xfun"))
shiny::runApp('inst/shinyApp')
?selectInput
runApp('inst/shinyApp')
shiny::icon("floppy-disk")
runApp('inst/shinyApp')
getwd()
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
input$defaults
Defaults <- list(physics = input$physics,
layout = input$layout)
Defaults
saveRDS(Defaults, "inst/shinyApp/www/Defaults.rds")
getwd()
saveRDS(Defaults, "/www/Defaults.rds")
getwd()
saveRDS(Defaults, "www/Defaults.rds")
runApp()
runApp('inst/shinyApp')
install.packages("shinyalert")
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
?shinyalert
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::document()
?visPhysics
?prettyRadioButtons
runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?saveRDS
runApp('inst/shinyApp')
nodes <- data.frame(id = 1:100, level = c(1,rep(2,99)))
edges <- data.frame(from = rep(1, 99), to = c(2:100))
visNetwork(nodes, edges) %>%
visHierarchicalLayout() %>%
visConfigure(enabled = TRUE)
nodes <- data.frame(id = 1:100, level = c(1,rep(2,99)))
edges <- data.frame(from = rep(1, 99), to = c(2:100))
library("visNetwork")
visNetwork(nodes, edges) %>%
visHierarchicalLayout() %>%
visConfigure(enabled = TRUE)
visNetwork(nodes, edges) %>%
visHierarchicalLayout() %>%
visConfigure(enabled = TRUE)
nodes <- data.frame(id = 1:3, title = paste0("", 1:3," tooltip"))
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>%
visConfigure(enabled = TRUE, filter = "interaction")
# using visNetworkEditor
network <- visNetwork(nodes, edges)
custom_network <- visNetworkEditor(object = network)
?visConfigure
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?visPhysics
runApp('Tests/TestVisConfigureR.R')
runApp('Tests/TestVisConfigureR.R')
devtools::build(); devtools::install()
CTUNetwork::runCTUNetworkApp()
remotes::install_github("CTU-Bern/CTUNetwork")
remotes::install_local("R:/Projectfacts/ODBC/pf_app/")
install.packages("purrr")
install.packages(c("stringi","timechange"))
install.packages(c("stringi", "timechange"))
install.packages("cli")
install.packages("cli")
install.packages("cli")
remotes::install_github("CTU-Bern/CTUNetwork")
install.packages("stringi")
install.packages("stringi")
devtools::document()
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
getwd()
# Load/install the local PF package
if (!"pf" %in% installed.packages()) {remotes::install_github("CTU-Bern/pf")}
# library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
# THIS SHOULD ULTIMATELY BE CHANGED FOR "NULL" (To load from ODBC)
# All_Tabs <- getPFData(NULL)
All_Tabs <- pf::getPFData(file = "TEMP/pf_tabs.rds")
# Only keeping useful information from All_Tabs
remotes::install_github("CTU-Bern/pf")
install.packages("curl")
install.packages("curl")
install.packages("httpuv ")
install.packages("httpuv")
install.packages("httpuv")
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
# Load/install the local PF package
if (!"pf" %in% installed.packages()) {remotes::install_github("CTU-Bern/pf")}
# library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
# THIS SHOULD ULTIMATELY BE CHANGED FOR "NULL" (To load from ODBC)
# All_Tabs <- getPFData(NULL)
All_Tabs <- pf::getPFData(file = "./TEMP/pf_tabs.rds")
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
print(getwd())
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
getwd()
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
?str_remove
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
remotes::install_github("CTU-Bern/CTUNetwork")
remotes::install_github("CTU-Bern/CTUNetwork")
CTUNetwork::runCTUNetworkApp()
Sys.info()$sysname
Sys.info()
Sys.info()[1]
TEMP = Sys.info()[1]
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
View(All_Tabs)
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
grepl("windows", Sys.info()[1], ignore.case = TRUE)
if (!"pf" %in% installed.packages()) {remotes::install_github("CTU-Bern/pf")}
library("pf")
library("CTUNetwork")
All_Tabs <- pf::getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# 1) FILTER INPUT DATASET ####
# -------------------------------------------------------------------------- #
# All_Tabs$...
#   customer # List of customers/organisations
#   crmkontakt # List of all contacts
#   financeposition # Amounts in invoices at work package level
#   financerecord # Invoice total amounts and contract total amounts
#   All_Tabs$projectstatedefinition # Explanations related to projects state code
#   worker # List of workers
#   project # List of projects, work packages
Projects.df <- All_Tabs$project[,colSums(is.na(All_Tabs$project))<nrow(All_Tabs$project)] # Removing columns containing only NAs
# 2) BUILD MAIN DATASET ####
# -------------------------------------------------------------------------- #
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$cf_sponsor, # Sponsor notes
DMNotes = Projects.df$CUSTOMFIELDVALUES, # Data Management notes
DLFSupport = Projects.df$cf_dlf_data_management_support,
DLFReached = rep(NA,dim(Projects.df)[1]),
ProdDate = Projects.df$STATECOMMENT,
Manager = Projects.df$FK_PERSONINCHARGE, # THIS DOES NOT CORRESPOND TO THE RESPONSIBLE/SUBSTITUTE COLUMNS !
TimeBudget = dplyr::coalesce(Projects.df$BillableTimeBudget,Projects.df$BillableTimeBudgetCumulated), # merge two columns
TimePercent = rep(NA,dim(Projects.df)[1]),
WorkerRate = Projects.df$WorkerRate,
HourlyCosts = rep(NA,dim(Projects.df)[1]),
FixedCosts =  rep(NA,dim(Projects.df)[1]),
MoneySpent = rep(NA,dim(Projects.df)[1]),
MoneyBudget = dplyr::coalesce(Projects.df$MoneyInBudget,Projects.df$MoneyInBudgetCumulated))
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]))
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]))
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$cf_sponsor, # Sponsor notes
DMNotes = Projects.df$CUSTOMFIELDVALUES, # Data Management notes
DLFSupport = Projects.df$cf_dlf_data_management_support)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$cf_sponsor)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER)
Projects.df$FK_CUSTOMERCONTACT
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$cf_sponsor)
Projects.df$cf_sponsor...187
Projects.df$cf_sponsor...241
identical(Projects.df$cf_sponsor...241, Projects.df$cf_sponsor...187)
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$`cf_sponsor...187`)
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
CTUNetwork::runCTUNetworkApp()
# Load/install the local PF package
if (!"pf" %in% installed.packages()) {remotes::install_github("CTU-Bern/pf")}
library("pf")
library("CTUNetwork")
# Retrieve data from ProjectFacts
# THIS SHOULD ULTIMATELY BE CHANGED FOR "NULL" (To load from ODBC)
# All_Tabs <- getPFData(NULL)
if (grepl("windows", Sys.info()[1], ignore.case = TRUE)){
All_Tabs <- pf::getPFData()
} else {
All_Tabs <- pf::getPFData(file = "/media/sf_SharedFolderVM/pf_tabs.rds")
}
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
Projects.df <- All_Tabs$project[,colSums(is.na(All_Tabs$project))<nrow(All_Tabs$project)] # Removing columns containing only NAs
# 2) BUILD MAIN DATASET ####
# -------------------------------------------------------------------------- #
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$`cf_sponsor...187`, # Sponsor notes (the column label recently changed, reason is unknown)
DMNotes = Projects.df$CUSTOMFIELDVALUES, # Data Management notes
DLFSupport = Projects.df$cf_dlf_data_management_support,
DLFReached = rep(NA,dim(Projects.df)[1]),
ProdDate = Projects.df$STATECOMMENT,
Manager = Projects.df$FK_PERSONINCHARGE, # THIS DOES NOT CORRESPOND TO THE RESPONSIBLE/SUBSTITUTE COLUMNS !
TimeBudget = dplyr::coalesce(Projects.df$BillableTimeBudget,Projects.df$BillableTimeBudgetCumulated), # merge two columns
TimePercent = rep(NA,dim(Projects.df)[1]),
WorkerRate = Projects.df$WorkerRate,
HourlyCosts = rep(NA,dim(Projects.df)[1]),
FixedCosts =  rep(NA,dim(Projects.df)[1]),
MoneySpent = rep(NA,dim(Projects.df)[1]),
MoneyBudget = dplyr::coalesce(Projects.df$MoneyInBudget,Projects.df$MoneyInBudgetCumulated))
Projects.df <- All_Tabs$project[,colSums(is.na(All_Tabs$project))<nrow(All_Tabs$project)] # Removing columns containing only NAs
# 2) BUILD MAIN DATASET ####
# -------------------------------------------------------------------------- #
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$`cf_sponsor...187`, # Sponsor notes (the column label recently changed, reason is unknown)
DMNotes = Projects.df$CUSTOMFIELDVALUES)
Projects.df <- All_Tabs$project[,colSums(is.na(All_Tabs$project))<nrow(All_Tabs$project)] # Removing columns containing only NAs
# 2) BUILD MAIN DATASET ####
# -------------------------------------------------------------------------- #
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$`cf_sponsor...187`, # Sponsor notes (the column label recently changed, reason is unknown)
DMNotes = Projects.df$CUSTOMFIELDVALUES, # Data Management notes
DLFSupport = Projects.df$cf_dlf_data_management_support)
identical(Projects.df$cf_dlf_data_management_support...206,Projects.df$cf_dlf_data_management_support...260)
identical(Projects.df$cf_dlf_data_management_support...206,Projects.df$cf_dlf_data_management_support...26
# 2) BUILD MAIN DATASET ####
# -------------------------------------------------------------------------- #
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
Projects.df$cf_dlf_data_management_support...206
# 2) BUILD MAIN DATASET ####
# -------------------------------------------------------------------------- #
Output.df <- data.frame(ProjectIDs = Projects.df$CaseId,
ProjectNames = Projects.df$Name,
ProjectID = Projects.df$CaseId,
ProjectName = Projects.df$Name,
ProjectLvl = Projects.df$FK_MAINPROJECT, # ID referring to the project level
PackageLvl = Projects.df$FK_PARENTPROJECT, # ID referring to the package level
UniqueCode = Projects.df$PK_Project, # ID referring to the unique entry code
Service = rep(NA,dim(Projects.df)[1]),
CDMS = rep(NA,dim(Projects.df)[1]),
State = Projects.df$FK_PROJECTSTATEDEFINITION_RELEVANT, # Relevant contains all infos !
CustomerID = Projects.df$FK_CUSTOMER,
Customer = Projects.df$FK_CUSTOMER,
Contact = Projects.df$FK_CUSTOMERCONTACT,
Sponsor = Projects.df$cf_sponsor...187, # Sponsor notes (the column label recently changed, reason is unknown)
DMNotes = Projects.df$CUSTOMFIELDVALUES, # Data Management notes
DLFSupport = Projects.df$cf_dlf_data_management_support...206,
DLFReached = rep(NA,dim(Projects.df)[1]),
ProdDate = Projects.df$STATECOMMENT,
Manager = Projects.df$FK_PERSONINCHARGE, # THIS DOES NOT CORRESPOND TO THE RESPONSIBLE/SUBSTITUTE COLUMNS !
TimeBudget = dplyr::coalesce(Projects.df$BillableTimeBudget,Projects.df$BillableTimeBudgetCumulated), # merge two columns
TimePercent = rep(NA,dim(Projects.df)[1]),
WorkerRate = Projects.df$WorkerRate,
HourlyCosts = rep(NA,dim(Projects.df)[1]),
FixedCosts =  rep(NA,dim(Projects.df)[1]),
MoneySpent = rep(NA,dim(Projects.df)[1]),
MoneyBudget = dplyr::coalesce(Projects.df$MoneyInBudget,Projects.df$MoneyInBudgetCumulated))
devtools::build(); devtools::install(); CTUNetwork::runCTUNetworkApp()
