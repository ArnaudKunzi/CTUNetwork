library("CTUNetwork")
# Retrieve data from ProjectFacts
All_Tabs <- getPFData()
# Only keeping useful information from All_Tabs
# $activitycategory = activity types - e.g. billable, non-billable
# $customfields = list of the custom fields
# $financearticle = types of work packages (Basic, Light, Full services)
# $projectstatedefinition = Explanations related to projects state code
# $financeposition = Invoices at package level
# $financerecord = Invoices total at project level
All_Tabs = All_Tabs[c("activitydata","customer","crmkontakt","financeposition",
"project","projectstatedefinition","worker")]
# Retrieve data
Data <- extractData(All_Tabs)
# Filter data
Data <- filterData(Data, All_Tabs)
# Filtering the lines corresponding to the project level (the aim is to separate for each division)
Data$Filt <- grepl("\\.|C-", Data$ProjectID)
# Free-up memory space
remove(All_Tabs)
# Changing data type
Data[,c("ProjectIDs","ProjectNames","State")] <- lapply(Data[,c("ProjectIDs","ProjectNames","State")], as.character)
# Dataframe with type of projects and corresponding patterns
ProjTypes.df <- data.frame(Name = c("External", "Consulting","Internal","Internal","FTE"),
Pattern = c("P-","C-","I-","IB-","FTE-"))
ProjStr <- c("P-","C-","I-","IB-","FTE-")
# values to show, or not show, these will be the 'choices' and 'selected' values
# for the checkboxGroupInput()
AllRows <- 1:dim(Data)[2]-1
1:dim(Data)[2]-1
# values to show, or not show, these will be the 'choices' and 'selected' values
# for the checkboxGroupInput()
AllRows <- 1:(dim(Data)[2]-1)
names(AllRows) <- colnames(Data)[-dim(Data)[2]]
SelectRows <- AllRows[c(1,3,4,8,18,20,21,22,23,24)]
AllRows
library(shiny)
library(data.table)
library(DT)
library(purrr)
# ---
# Data Preparation
# ---
dat <- rbind(
data.table(Continent = rep("Europe", 3),
Country = c("England", "France", "Italy"),
x = 1 : 3,
y = 7 : 5),
data.table(Continent = rep("Africa", 3),
Country = c("Niger", "Benin", "Uganda"),
x = 5 : 7,
y = 2 : 4))
# Outer data table - country values aggregated by continent
parents  <- dat[, .(TotalX = sum(x), MeanY = mean(y)), by = Continent]
# List of inner data tables - list should have length of parents rows
children <- split(dat, by = "Continent") %>%
purrr::map(function(x) {x[, .(Country, x, y)]})
# ---
# Helping functions
# from https://stackoverflow.com/questions/60662749/parent-child-rows-in-r
# ---
NestedData <- function(dat, children){
stopifnot(length(children) == nrow(dat))
g <- function(d){
if(is.data.frame(d)){
purrr::transpose(d)
}else{
purrr::transpose(NestedData(d[[1]], children = d$children))
}
}
subdats <- lapply(children, g)
oplus <- sapply(subdats, function(x) if(length(x)) "&oplus;" else "")
cbind(" " = oplus, dat, "_details" = I(subdats), stringsAsFactors = FALSE)
}
rowNames <- FALSE
colIdx <- as.integer(rowNames)
Dat <- NestedData(
dat = parents,
children = children
)
parentRows <- which(Dat[, 1] != "")
# make the callback - is dependent on input data (should vanish in future)
callback = JS(
sprintf("var parentRows = [%s];", toString(parentRows-1)),
sprintf("var j0 = %d;", colIdx),
"var nrows = table.rows().count();",
"for(var i=0; i < nrows; ++i){",
"  if(parentRows.indexOf(i) > -1){",
"    table.cell(i,j0).nodes().to$().css({cursor: 'pointer'});",
"  }else{",
"    table.cell(i,j0).nodes().to$().removeClass('details-control');",
"  }",
"}",
"",
"// make the table header of the nested table",
"var format = function(d, childId){",
"  if(d != null){",
"    var html = ",
"      '<table class=\"display compact hover\" ' + ",
"      'style=\"padding-left: 30px;\" id=\"' + childId + '\"><thead><tr>';",
"    for(var key in d[d.length-1][0]){",
"      html += '<th>' + key + '</th>';",
"    }",
"    html += '</tr></thead></table>'",
"    return html;",
"  } else {",
"    return '';",
"  }",
"};",
"",
"// row callback to style the rows of the child tables",
"var rowCallback = function(row, dat, displayNum, index){",
"  if($(row).hasClass('odd')){",
"  } else {",
"  }",
"};",
"",
"// header callback to style the header of the child tables",
"var headerCallback = function(thead, data, start, end, display){",
"  $('th', thead).css({",
"    'border-top': '3px solid indigo',",
"    'color': 'indigo',",
"  });",
"};",
"",
"// make the datatable",
"var format_datatable = function(d, childId){",
"  var dataset = [];",
"  var n = d.length - 1;",
"  for(var i = 0; i < d[n].length; i++){",
"    var datarow = $.map(d[n][i], function (value, index) {",
"      return [value];",
"    });",
"    dataset.push(datarow);",
"  }",
"  var id = 'table#' + childId;",
"  if (Object.keys(d[n][0]).indexOf('_details') === -1) {",
"    var subtable = $(id).DataTable({",
"                 'data': dataset,",
"                 'autoWidth': true,",
"                 'deferRender': true,",
"                 'info': false,",
"                 'lengthChange': false,",
"                 'ordering': d[n].length > 1,",
"                 'order': [],",
"                 'paging': false,",
"                 'scrollX': false,",
"                 'scrollY': false,",
"                 'searching': false,",
"                 'sortClasses': false,",
"                 'rowCallback': rowCallback,",
"                 'headerCallback': headerCallback,",
"                 'columnDefs': [{targets: '_all', className: 'dt-center'}]",
"               });",
"  } else {",
"    var subtable = $(id).DataTable({",
"            'data': dataset,",
"            'autoWidth': true,",
"            'deferRender': true,",
"            'info': false,",
"            'lengthChange': false,",
"            'ordering': d[n].length > 1,",
"            'order': [],",
"            'paging': false,",
"            'scrollX': false,",
"            'scrollY': false,",
"            'searching': false,",
"            'sortClasses': false,",
"            'rowCallback': rowCallback,",
"            'headerCallback': headerCallback,",
"            'columnDefs': [",
"              {targets: -1, visible: false},",
"              {targets: 0, orderable: false, className: 'details-control'},",
"              {targets: '_all', className: 'dt-center'}",
"             ]",
"          }).column(0).nodes().to$().css({cursor: 'pointer'});",
"  }",
"};",
"",
"// display the child table on click",
"table.on('click', 'td.details-control', function(){",
"  var tbl = $(this).closest('table'),",
"      tblId = tbl.attr('id'),",
"      td = $(this),",
"      row = $(tbl).DataTable().row(td.closest('tr')),",
"      rowIdx = row.index();",
"  if(row.child.isShown()){",
"    row.child.hide();",
"    td.html('&oplus;');",
"  } else {",
"    var childId = tblId + '-child-' + rowIdx;",
"    row.child(format(row.data(), childId)).show();",
"    td.html('&CircleMinus;');",
"    format_datatable(row.data(), childId);",
"  }",
"});")
# ---
# App definition
# ---
ui <- fluidPage(# Application title
titlePanel("Collapse/Expand table"),
mainPanel(DTOutput("my_table")))
server <- function(input, output) {
output$my_table <- DT::renderDT({
datatable(
Dat, callback = callback, rownames = rowNames,
escape = - colIdx - 1,
options = list(
dom = "t",
columnDefs = list(
list(visible = FALSE, targets = ncol(Dat)-1+colIdx),
list(orderable = FALSE, className = 'details-control',
targets = colIdx),
list(className = "dt-center", targets = "_all")
)
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
dat <- rbind(
data.frame(Continent = rep("Europe", 3),
Country = c("England", "France", "Italy"),
x = 1 : 3,
y = 7 : 5),
data.frame(Continent = rep("Africa", 3),
Country = c("Niger", "Benin", "Uganda"),
x = 5 : 7,
y = 2 : 4))
library(shiny)
library(DT)
ui <- fluidPage(# Application title
titlePanel("Collapse/Expand table"),
mainPanel(DTOutput("my_table")))
callback_js <- JS(
"table.on('click', 'tr.group', function () {",
"  var rowsCollapse = $(this).nextUntil('.group');",
"  $(rowsCollapse).toggleClass('hidden');",
"});"
)
dat <- rbind(
data.frame(Continent = rep("Europe", 3),
Country = c("England", "France", "Italy"),
x = 1 : 3,
y = 7 : 5),
data.frame(Continent = rep("Africa", 3),
Country = c("Niger", "Benin", "Uganda"),
x = 5 : 7,
y = 2 : 4))
server <- function(input, output) {
output$my_table <- DT::renderDT({
datatable(
dat,
extensions = 'RowGroup',
options = list(rowGroup = list(dataSrc = 1), pageLength = 20),
callback = callback_js,
selection = 'none'
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
devtools::build();devtools::install()
library("CTUNetwork")
runApp('inst/shinyApp')
DataUpTab
# Removing the list of all workers at the project level (useless)
DataUpTab <- AllData()$DataUp
Idx = grepl("\\,", DataUpTab$Workers)
DataUpTab$Workers[Idx] <- NA
# No need to repeat the DLF support & service values
DataUpTab$DLFSupport[DataUpTab$Levels == F] <- NA
DataUpTab$DLFReached <- as.factor(DataUpTab$DLFReached) # looks different if not factor
DataUpTab$Service[DataUpTab$Levels == F] <- NA
# Round MoneySpent to 2 decimals
DataUpTab$MoneySpent <- round(DataUpTab$MoneySpent,2)
# Columns are adjusted based on checkboxes
Cols <- c(colnames(DataUpTab[as.integer(input$tablevars)]),"Fraction","Levels")
input$tabledata
# Rows are adjusted based on input
Rows <- ifelse(input$tabledata,"Yes", 1:dim(DataUpTab)[1], which(!DataUpTab$Filt))
head(DataUpTab$Filt)
input$tabledata == "Yes"
# Rows are adjusted based on input
Rows <- ifelse(input$tabledata == "Yes", 1:dim(DataUpTab)[1], which(!DataUpTab$Filt))
Rows
1:dim(DataUpTab)[1]
which(!DataUpTab$Filt)
View(DataUpTab)
# Rows are adjusted based on input
Rows <- ifelse(input$tabledata == "Yes", 1:dim(DataUpTab)[1], which(DataUpTab$Filt))
Rows
# Rows are adjusted based on input
Rows <- ifelse(input$tabledata == "Yes", seq(1,dim(DataUpTab)[1]), which(DataUpTab$Filt))
Rows
dim(DataUpTab)[1]
# Rows are adjusted based on input
Rows <- ifelse(input$tabledata == "No", seq(1, dim(DataUpTab)[1]), which(DataUpTab$Filt))
Rows
# Rows are adjusted based on input
ifelse(input$tabledata == "Yes", Rows <- 1:dim(DataUpTab)[1], Rows <- which(DataUpTab$Filt))
BuildTable(DataUpTab[Rows,Cols])
IdxProj <- which(DataUpTab$ProjectIDs==input$node_id)
devtools::build();devtools::install(); library(CTUNetwork)
library(CTUNetwork)
runApp('inst/shinyApp')
?union
union(c(1,2,3,4), c(2,3,6))
intersect(c(1,2,3,4), c(2,3,6))
devtools::build();devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build();devtools::install(); library(CTUNetwork)
library(CTUNetwork)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
?selectInput
?visOptions
?dropdownButton
library(shinyWidgets)
?dropdownButton
devtools::build();devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
runApp('Tests/Test3.R')
visOptions?
dsf$
%>%io
?visOptions
runApp('Tests/Test3.R')
shiny::runApp('inst/shinyApp')
devtools::build; devtools:install(); library(CTUNetwork)
devtools::build; devtools::install(); library(CTUNetwork)
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
?prettyToggle
??prettyToggle
?sliderInput
runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
devtools::document()
devtools::document()
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
GraphParam()
GraphParam
GraphParam
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
GraphParam()
GraphParam
head(AllData())
TEST = GraphParam()
runApp('inst/shinyApp')
GraphParam()
# 1. Network plot
output$mynetworkid <- visNetwork::renderVisNetwork(
NetworkPlot(AllData()$Nodes, AllData()$Edges, params = GraphParams())
)
runApp('inst/shinyApp')
devtools::document()
runApp('inst/shinyApp')
paste("Yo man", collapse = "_")
paste("Yo man", sep =  = "_")
paste("Yo man", sep = "_")
str_replace("Yo man", " ", "_")
lower("Yo_man")
tolower("Yo_man")
devtools::document()
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?str_replace
devtools::document()
runApp('inst/shinyApp')
?visIgraphLayout
?visLayout
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
devtools::build(); devtools::install(); library(CTUNetwork)
devtools::build(); devtools::install(); library(CTUNetwork)
devtools::build(); devtools::install(); library(CTUNetwork)
visNetwork::visNetwork(nodes, edges,
main = list(text="CTU - PROJECTFACTS NETWORK", style="font-size:25px; color: #0073b7; text-align: center;"),
submain = "Nodes width = Amount of time booked for each individual worker - Edges width = Amount of time booked overall (all workers combined)") %>%
# visIgraphLayout(layout = "layout.reingold.tilford",circular=T)  %>%
# visIgraphLayout(layout = "layout_as_star", physics = T, randomSeed = 1234)  %>% # why not
# visIgraphLayout(layout = "layout_in_circle", physics = T, randomSeed = 1234)  %>% # why not
# visNetwork::visIgraphLayout(layout = params$layout, physics = params$physics, circular = params$circular, randomSeed = 1234)  %>% # Probably the best one !
# visIgraphLayout(layout = "layout_with_fr", physics = F, randomSeed = 1234)  %>% # the default one
# visIgraphLayout(layout = "layout_with_kk", physics = T, randomSeed = 1234)  %>% # Good one
# visIgraphLayout(layout = "layout_with_mds", physics = T, randomSeed = 1234)  %>% # Nicest one I believe
visNetwork::visOptions(highlightNearest = T, nodesIdSelection = list(enabled = TRUE, main = "Select Worker/Project"),
selectedBy = list(variable="group", main = "Select State")) %>% #, multiple=T
visNetwork::visPhysics(solver = "hierarchicalRepulsion", hierarchicalRepulsion = list(springLength = 850, nodeDistance = 90), stabilization = "onlyDynamicEdges") %>%
visNetwork::visNodes(shapeProperties = list(interpolation = F)) %>%
visNetwork::visEdges(smooth = F, color=list(color = "#848484", highlight = "#000000")) %>%
visNetwork::visEvents(selectNode = "function(nodes) {
Shiny.onInputChange('node_id', nodes.nodes);
openBox('Bargraphs');
;}",
deselectNode = "function(){
closeBox('Bargraphs');
}") %>%
# See: https://stackoverflow.com/questions/74768667/visnetwork-visevents-javascript-to-uncollapse-box
{if (params$layout == "layout.reingold.tilford")
visNetwork::visIgraphLayout(layout = "layout.reingold.tilford", physics = params$physics, circular = T, randomSeed = 1234)
else
visNetwork::visIgraphLayout(layout = params$layout, physics = params$physics, randomSeed = 1234)}
devtools::build(); devtools::install(); library(CTUNetwork)
shiny::runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?pickerInput
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
# 1. Network plot
output$mynetworkid <- visNetwork::renderVisNetwork(
NetworkPlot(AllData()$Nodes, AllData()$Edges, params = GraphParams())
)
View(output)
rlang::last_error()
GraphParams()
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::install_github("shinyWidgets")
remotes::install_github("dreamRs/shinyWidgets")
runApp('inst/shinyApp')
install.packages(c("cli", "highr", "htmlwidgets", "isoband", "officer", "purrr", "xfun"))
install.packages(c("cli", "highr", "htmlwidgets", "isoband", "officer", "purrr", "xfun"))
shiny::runApp('inst/shinyApp')
?selectInput
runApp('inst/shinyApp')
shiny::icon("floppy-disk")
runApp('inst/shinyApp')
getwd()
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
input$defaults
Defaults <- list(physics = input$physics,
layout = input$layout)
Defaults
saveRDS(Defaults, "inst/shinyApp/www/Defaults.rds")
getwd()
saveRDS(Defaults, "/www/Defaults.rds")
getwd()
saveRDS(Defaults, "www/Defaults.rds")
runApp()
runApp('inst/shinyApp')
install.packages("shinyalert")
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
?shinyalert
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::document()
?visPhysics
?prettyRadioButtons
runApp('inst/shinyApp')
runApp('inst/shinyApp')
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?saveRDS
runApp('inst/shinyApp')
nodes <- data.frame(id = 1:100, level = c(1,rep(2,99)))
edges <- data.frame(from = rep(1, 99), to = c(2:100))
visNetwork(nodes, edges) %>%
visHierarchicalLayout() %>%
visConfigure(enabled = TRUE)
nodes <- data.frame(id = 1:100, level = c(1,rep(2,99)))
edges <- data.frame(from = rep(1, 99), to = c(2:100))
library("visNetwork")
visNetwork(nodes, edges) %>%
visHierarchicalLayout() %>%
visConfigure(enabled = TRUE)
visNetwork(nodes, edges) %>%
visHierarchicalLayout() %>%
visConfigure(enabled = TRUE)
nodes <- data.frame(id = 1:3, title = paste0("", 1:3," tooltip"))
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>%
visConfigure(enabled = TRUE, filter = "interaction")
# using visNetworkEditor
network <- visNetwork(nodes, edges)
custom_network <- visNetworkEditor(object = network)
?visConfigure
devtools::build(); devtools::install(); library(CTUNetwork)
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
?visPhysics
runApp('Tests/TestVisConfigureR.R')
runApp('Tests/TestVisConfigureR.R')
devtools::build(); devtools::install()
